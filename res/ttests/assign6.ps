%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Wed Apr 28 21:49:50 2021
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0
ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(6/pg 1)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E/F1 10/Times-Bold@0 SF
(Final Assignment -- T)221.1 96 Q(ar)-.92 E(get Code Generation)-.1 E F0
1.493(The \214nal part of the compiler is the back end which generates \
assembly language from quads, with some help from the)63.2 132 R .328
(symbol table.)63.2 144 R .328(Since we ha)5.328 F .628 -.15(ve c)-.2 H
-.15(ove).15 G .328
(red the X86 architecture in class, that is the recommended one to use.)
.15 F -1.1(Yo)5.328 G 2.828(uc)1.1 G .329(ould do either)-2.828 F
(X86-32 or X86-64.)63.2 156 Q .659(Since quads are theoretically indepe\
ndent of the source language, there are no more requirements and e)63.2
180 R -.15(xe)-.15 G .659(mptions ha).15 F .659(ving to)-.2 F
(do with the C language.)63.2 192 Q(Whate)5 E -.15(ve)-.25 G 2.5(ry).15
G
(ou had to support in Assignment 5 you need to support in Assignment 6.)
-2.5 E 1.121(When you ha)63.2 216 R 1.421 -.15(ve s)-.2 H 1.122(uccessf\
ully completed this assignment, your compiler should be able to accept \
a simple test program \(as).15 F
(usual, OK to use cpp to pre-process the source\) which demonstrates:)
63.2 228 Q/F2 10/Courier@0 SF 6(*R)120.8 242 S
(eading and writing local and global variables)-6 E 6(*D)120.8 256 S
(eclarative pseudo-opcodes for global declarations)-6 E 6(*C)120.8 270 S
(omputation of expressions)-6 E 6(*R)120.8 284 S
(eading and writing array elements)-6 E 6(*C)120.8 298 S
(reating and dereferencing pointer values)-6 E 6(*S)120.8 312 S
(tring constants)-6 E 6(*C)120.8 326 S(ontrol flow)-6 E
(\(if statements and at least one type of loop\))12 E 6(*C)120.8 340 S
(alling external function, with arguments \(int or pointer\))-6 E F0(Th\
e result of your program \(on stdout or to a \214le speci\214ed on the \
command line\) is a .s \214le.)63.2 364 Q -1.1(Yo)5 G 2.5(us)1.1 G
(hould then be able to run)-2.5 E F2(cc -m32 file.s)120.8 378 Q(OR)81.2
392 Q(cc -m64 file.s)120.8 406 Q F0 .359(which will run the system')63.2
418 R 2.859(sa)-.55 G .359(ssembler on your output, in)-2.859 F -.2(vo)
-.4 G .559 -.1(ke t).2 H .359(he system link).1 F .359
(er to link in the standard C library and run-time)-.1 F .719
(startup code, and produce an e)63.2 430 R -.15(xe)-.15 G .719
(cutable a.out which, when run, should produce correct output!).15 F .72
(Call the standard C printf\(\))5.72 F 1.395
(function to generate run-time output.)63.2 442 R 1.394(Since your comp\
iler will probably not be able to deal with the system header \214les)
6.394 F .347(\(which may contain constructs that are optional\), just c\
reate a simple prototype declaration such as)63.2 454 R .347
(int printf\(\); someplace in)5.347 F
(your test C source, prior to calling printf.)63.2 466 Q(Or)5 E 2.5(,i)
-.4 G 2.5(fy)-2.5 G
(ou supported implicit declaration of functions, you')-2.5 E
(ll be \214ne.)-.1 E .045
(The -m32 \215ag is to be used for X86 32 bit code.)63.2 490 R .045
(If you ha)5.045 F .345 -.15(ve g)-.2 H .045
(enerated 64-bit assembly code, use -m64.).15 F .045
(Because the function)5.045 F(calling APIs are dif)63.2 502 Q(ferent be\
tween the 32 and 64 architecture, it is important that you select the c\
orrect \215ag!)-.25 E(As discussed in class, it is not required that yo\
ur assembly code be "optimal" in an)63.2 526 Q 2.5(yw)-.15 G(ay)-2.6 E
2.5(,b)-.65 G(ut it must be correct.)-2.7 E F1(Instruction Selection)
271.695 550 Q F0 .107(Instruction selection is a hard problem.)63.2 574
R .108(The recommended approach is to write a v)5.108 F .108
(ery simple instruction selector which looks)-.15 F .797
(at the quad opcode and the addressing modes in an ad-hoc f)63.2 586 R
.796(ashion, one quad at a time, and generates a sequence of one or)-.1
F(more assembly instructions per quad.)63.2 598 Q .686(X86 is generally\
 a 2-address architecture, and has additional address mode combination \
restrictions which are mentioned in)63.2 622 R .062(the lecture notes.)
63.2 634 R -1.1(Yo)5.062 G 2.562(um)1.1 G .062(ight w)-2.562 F .062
(ant to reserv)-.1 F 2.562(eo)-.15 G .061(ne or tw)-2.562 F 2.561(oo)-.1
G 2.561(ft)-2.561 G .061(he "scratch" re)-2.561 F .061
(gisters for dealing with situations where the quad is)-.15 F
(too rich to e)63.2 646 Q(xpress in one step.)-.15 E(E.g.)5 E F2
(i{lvar}=ADD j{lvar},k{lvar})63.2 660 Q 27.6(movl \(-16\)%ebp,%eax)63.2
688 R(#j is at offset -16 in stack frame)88.8 E 27.6
(movl \(-20\)%ebp,%edx)63.2 702 R(#k is at offset -20)88.8 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(6/pg 2)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E/F1 10/Courier@0 SF
27.6(addl %edx,%eax)63.2 98 R(#add, result in eax)61.2 E 27.6
(movl %eax,\(-24\)%ebp)63.2 112 R(#move result to i at offset -24)88.8 E
(##Optimal sequence:)63.2 140 Q 27.6(movl \(-16\)%ebp,%eax)63.2 154 R
(#j is at offset -16 in stack frame)88.8 E 27.6(addl \(-20\)%ebp,%eax)
63.2 168 R(#k is at offset -20)88.8 E 27.6(movl %eax,\(-24\)%ebp)63.2
182 R(#move result to i at offset -24)88.8 E/F2 10/Times-Bold@0 SF
(Register Allocation)275.035 218 Q F0 .189
(As discussed in lecture notes, re)63.2 242 R .189
(gister allocation can be a v)-.15 F .189(ery dif)-.15 F .189
(\214cult problem, f)-.25 F .189(ar be)-.1 F .189
(yond our ability to tackle in the limited)-.15 F
(time left in the course.)63.2 254 Q .763(The most primiti)63.2 278 R
1.063 -.15(ve y)-.25 H .763(et still functional approach to re).15 F
.762(gister allocation is to use the same scratch re)-.15 F .762
(gisters each time to bring)-.15 F 1.962(memory operands into re)63.2
290 R 1.963(gisters as needed to perform operations.)-.15 F 1.963
(There is no attempt to ha)6.963 F 2.263 -.15(ve l)-.2 H 1.963(ocal v)
.15 F 1.963(ariables reside in)-.25 F(re)63.2 302 Q 2.037
(gisters in between quads, and e)-.15 F -.15(ve)-.25 G 4.537(nt).15 G
2.037(emporary v)-4.537 F 2.037(alues \(such as arise in complicated e)
-.25 F 2.037(xpressions\) w)-.15 F 2.036(ould be considered)-.1 F .153
("phantom" local v)63.2 314 R .153(ariables and w)-.25 F .154(ould o)-.1
F .154
(wn a speci\214c stack frame slot for the duration of the function, e)
-.25 F -.15(ve)-.25 G 2.654(na).15 G .154(fter the tempv)-2.654 F .154
(ar is)-.25 F(no longer li)63.2 326 Q -.15(ve)-.25 G(.).15 E(Alternati)
63.2 350 Q -.15(ve)-.25 G(ly).15 E 3.333(,y)-.65 G .833
(ou can attempt to do a primiti)-3.333 F 1.133 -.15(ve r)-.25 H -.15(eg)
.15 G .833(ister allocator with the tempv).15 F .832
(als by making some assumptions based on)-.25 F(ho)63.2 362 Q 2.727(wy)
-.25 G .227(ou generated quads.)-2.727 F .227
(If you only assign to a temporary v)5.227 F .227
(alue once and only use it once, you do not need to w)-.25 F .228
(orry about)-.1 F(li)63.2 374 Q 1.143 -.15(ve v)-.25 H .843
(alue analysis.)-.1 F -1.1(Yo)5.843 G 3.343(uc)1.1 G .842(an just assum\
e that the temporary is dead after its \214rst and only use as a source\
 operand.)-3.343 F .842(But of)5.842 F(course if you don')63.2 386 Q 2.5
(tg)-.18 G(enerate quads this w)-2.5 E(ay)-.1 E 2.5(,d)-.65 G(on')-2.5 E
2.5(te)-.18 G(xpect it to w)-2.65 E(ork!)-.1 E .687(The most rob)63.2
410 R .687(ust re)-.2 F .688
(gister allocator which you could accomplish w)-.15 F .688
(ould be full local re)-.1 F .688
(gister allocation \(within a basic block\))-.15 F .798
(using a "scoreboard" type approach.)63.2 422 R .798
(Here most temporary v)5.798 F .798(ariables w)-.25 F .798
(ould be satis\214ed with a re)-.1 F(gister)-.15 E 3.297(,a)-.4 G .797
(nd you w)-3.297 F .797(ould only)-.1 F
(need to assign stack slots to those temporaries that o)63.2 434 Q -.15
(ve)-.15 G(r\215o).15 E(wed the re)-.25 E(gister pool.)-.15 E F2
(General Hints)285.86 458 Q F0 1.102
(If you are unsure of what opcode to pick, or ho)63.2 482 R 3.603(wt)
-.25 G 1.103(he instruction w)-3.603 F 1.103
(orks, the best approach is to create a tin)-.1 F 3.603(yt)-.15 G 1.103
(est program)-3.603 F 1.053(which e)63.2 494 R -.15(xe)-.15 G 1.053
(rcises the operation under consideration \(e.g. inte).15 F 1.053
(ger di)-.15 F 1.052
(vision\), run it through gcc -S to see what gcc picks, then)-.25 F
1.017(look up the opcode and addressing mode in the assembly language r\
eference manual for the architecture in which you are)63.2 506 R -.1(wo)
63.2 518 S .53(rking \(manuals for SP).1 F .529(ARC and X86 ha)-.92 F
.829 -.15(ve b)-.2 H .529(een placed on the course web site\).).15 F
-1.1(Yo)5.529 G 3.029(um)1.1 G .529(ay need to gi)-3.029 F .829 -.15
(ve g)-.25 H .529(cc the -O0 \215ag to).15 F .61(turn of)63.2 530 R 3.11
(ft)-.25 G .61(he optimizer)-3.11 F 3.11(,o)-.4 G .61
(therwise your entire test program may get optimized a)-3.11 F -.1(wa)
-.15 G 3.11(yb).1 G .61(ecause the compiler is smarter than you)-3.11 F
(anticipated.)63.2 542 Q 2.052
(When looking at GCC output, do not be concerned with comment directi)
63.2 566 R -.15(ve)-.25 G 2.051(s, or sections other than te).15 F 2.051
(xt, data and bss)-.15 F 2.619(\(.comm\). Y)63.2 578 R .119
(ou may see some v)-1.1 F .119
(ery confusing gcc output which is intended for deb)-.15 F .12
(ugging, e)-.2 F .12(xception handling, etc.)-.15 F .12(In the Unit)5.12
F 2.5(6n)63.2 590 S(otes, this e)-2.5 E(xtraneous output w)-.15 E
(as sanitized for your protection.)-.1 E -1.1(Yo)63.2 614 S 3.573(um)1.1
G 1.073(ight also \214nd that running GCC on some of the test cases fro\
m Unit 6 generates dif)-3.573 F 1.072(ferent sequences of instructions)
-.25 F .321(and/or re)63.2 626 R .321(gisters than the e)-.15 F .321
(xamples sho)-.15 F 2.821(wed. Dif)-.25 F .321(ferent v)-.25 F .321
(ersions of GCC produce dif)-.15 F .321(ferent code.)-.25 F -1.1(Yo)
5.321 G 2.821(uc)1.1 G .321(an assume that both the)-2.821 F -.15(ex)
63.2 638 S .617(amples and the code that your GCC generates are correct\
 \(i.e. that there are no b).15 F .617(ugs in GCC\).)-.2 F .616
(And of course, a compiler)5.617 F
(such as clang might produce signi\214cantly dif)63.2 650 Q
(ferent code.)-.25 E 0 Cg EP
%%Trailer
end
%%EOF
