%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Tue Apr  6 02:44:02 2021
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 8
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0
ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(5/pg 1)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E/F1 11/Times-Bold@0 SF
(ASSIGNMENT #5: W)212.187 97 Q(orking on y)-.825 E(our Quads)-.275 E/F2
11/Times-Roman@0 SF(Not surprisingly)63.2 136 Q 2.75(,t)-.715 G
(he goal of Assignment #5 is to emit quads.)-2.75 E(No)63.2 162 Q 2.004
-.715(w, t)-.275 H .573(here is no particular standard w).715 F .573
(ay of encoding or representing quads.)-.11 F -.88(We)6.073 G -1.815
-.55('v e).88 H .573(used certain notation in class)3.873 F .051
(and in the lecture notes, b)63.2 175 R .052
(ut you are not bound to that.)-.22 F -1.21(Yo)5.552 G 2.802(ua)1.21 G
.052(re not bound to the algorithms and methods presented)-2.802 F
(either)63.2 188 Q(.)-.605 E 1.391(The only requirement is that you gen\
erate quads and output them in a human-readable form, and that you use)
63.2 214 R(notation which mak)63.2 227 Q(es sense, k)-.11 E(eeping in m\
ind that you will soon use these quads to generate actual assembly code\
.)-.11 E F1(THINGS Y)198.443 253 Q(OU DO AND DO NO)-.385 E 2.75(TH)-.44
G -1.595(AV)-2.75 G 2.75(ET)1.595 G 2.75(OD)-2.948 G(O:)-2.75 E/F3 11
/Courier@0 SF 6.6(+E)63.2 279 S(xpressions)-6.6 E 6.6(+O)99.2 292 S
(perators)-6.6 E 6.6(+a)105.8 305 S
(rithmetic operators including pointer add/substract)-6.6 E 6.6(+s)105.8
318 S(izeof \(you need that anyway for pointer arith\))-6.6 E 6.6(+a)
105.8 331 S(ssignment)-6.6 E 6.6(-b)105.8 344 S
(itwise/shift operators optional but really not that hard)-6.6 E 6.6(-t)
105.8 357 S(ernary and comma operators optional)-6.6 E 6.6(-n)105.8 370
S 6.6(oc)-6.6 G(asts)-6.6 E 6.6(-n)105.8 383 S 6.6(oC)-6.6 G
(99 features such as compound literals)-6.6 E 6.6(+S)99.2 396 S
(upport operations on ints and pointers)-6.6 E 6.6(-Y)105.8 409 S
(ou don't have to worry about floating point, different)-6.6 E
(size integer operations, etc.)135.2 422 Q 6.6(+Y)105.8 435 S
(ou do need to get pointer +/- integer and pointer - pointer right.)-6.6
E(Without this arrays don't work.)135.2 448 Q 6.6(-s)105.8 461 S
(tructure member operators . and -> are optional)-6.6 E
(Implicit in handling structures is assigning offsets to)135.2 474 Q
(the members.)135.2 487 Q(You should assume the size and alignment)13.2
E(constraints of your target architecture \(perhaps encode them)135.2
500 Q(in a table\) and then use the algorithm presented in class to)
135.2 513 Q(lay out the structure.)135.2 526 Q
(H&S and the C standard also discuss this.)135.2 539 Q 6.6(+Y)105.8 552
S(ou need to support making a function call, including passing)-6.6 E
6.6(arguments. It's)135.2 565 R(OK to assume that the left operand to)
6.6 E 6.6(af)135.2 578 S
(unction call expression is a simple identifier \(rather)-6.6 E
(than an arbitrary expression of type pointer to fn\) if that)135.2 591
Q(makes it easier for you.)135.2 604 Q 6.6(+S)63.2 630 S(tatements)-6.6
E 6.6(+c)99.2 643 S(ompound statements)-6.6 E
(Just generate the quads for each statement in series)135.2 656 Q 6.6
(+E)99.2 669 S(xpression statements)-6.6 E
(An expression statement that has no "useful" effect)135.2 682 Q
(or side-effect, e.g. a+1; should generate a warning)135.2 695 Q
(but this is optional)135.2 708 Q 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(5/pg 2)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 11
/Courier@0 SF 6.6(+I)99.2 104 S 6.6(fs)-6.6 G(tatements)-6.6 E 6.6(+L)
99.2 117 S(oop statements)-6.6 E
(-only one type of loop required, but once you've done one,)135.2 130 Q
(the others are pretty easy anyway.)141.8 143 Q 6.6(+b)99.2 156 S
(reak/continue statements)-6.6 E
(You need to keep the break and continue basic block targets)135.2 169 Q
(as part of your "cursor" or "state" while generating quads)135.2 182 Q
6.6(+r)99.2 195 S(eturn statements)-6.6 E
(OK to support just functions returning int, or void)135.2 208 Q 6.6(-G)
99.2 221 S(oto and labeled statements optional)-6.6 E
(As discussed in class, a labeled statement creates a new basic)135.2
234 Q(block and a symbol table entry.)135.2 247 Q
(The basic block number can)13.2 E
(be the primary attribute of the entry.)135.2 260 Q(Goto statements to)
13.2 E 6.6(af)135.2 273 S
(orward label install a symbol table entry with the basic)-6.6 E
(block number undefined.)135.2 286 Q(When the matching label is found,)
13.2 E(find it in the symbol table and assign it a basic block number.)
135.2 299 Q(If, when quads are being generated, a GOTO statement refers)
135.2 312 Q(to a label with no defined basic block, that's an error.)
135.2 325 Q 6.6(-S)99.2 338 S(witch statements optional)-6.6 E
(These are a big pain.)135.2 351 Q(Lecture notes discuss three ways)13.2
E(of handling them.)135.2 364 Q
(The repeated compare-and-branch approach)13.2 E
(is the easiest, should you decide to do this optional part.)135.2 377 Q
6.6(-I)63.2 403 S(nitialized declarators)-6.6 E(Still optional.)99.2 416
Q(Simple declarations, e.g.)13.2 E(int a=1;)135.2 429 Q
(are straightforward.)99.2 442 Q
(Complex initializers with all the curly braces)13.2 E
(could be a big time sink.)99.2 455 Q 6.6(-F)63.2 481 S
(unction formal parameters)-6.6 E
(You need to support function definitions. They don't need to)99.2 494 Q
(take any parameters, although that would be a nice bonus.)99.2 507 Q
6.6(-O)63.2 533 S(ptimizations)-6.6 E
(It is not necessary to try to output the "best" series of quads.)99.2
546 Q(You might find that your algorithm generates extraneous steps,)
99.2 559 Q
(e.g. taking a value from one place, moving it to another, and)99.2 572
Q(moving it back to the first place.)99.2 585 Q
(Or you might notice that)13.2 E
(you are performing computations in the target code which could)99.2 598
Q(be done at compile-time and replaced with a constant, e.g.)99.2 611 Q
(a=3+4;)99.2 624 Q
(In "theory", the architecture-independent optimizer would find)99.2 650
Q(these and optimize them.)99.2 663 Q
(Of course we won't be doing that...)13.2 E/F2 10/Courier@0 SF(========\
===================================================================)63.2
690 Q(EXAMPLE 1)236 704 Q 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(5/pg 3)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF(=========================================================\
==================)63.2 105 Q(Input:)63.2 133 Q(int a;)120.8 147 Q
(int f\(b\))120.8 175 Q({)120.8 189 Q(b=a+3;)178.4 203 Q(})120.8 217 Q
(int g\(\))120.8 245 Q({)120.8 259 Q(struct x {)126.8 273 Q(int a1;)
178.4 287 Q(int b2;)178.4 301 Q 6(}x)126.8 315 S(;)-6 E(x.b2=a;)178.4
329 Q(})120.8 343 Q(Output:)63.2 357 Q(AST Dump for function f:)120.8
371 Q(LIST {)126.8 385 Q(ASSIGNMENT)132.8 399 Q
(stab_var name=b def @<stdin>:4)138.8 413 Q(BINARY OP +)138.8 427 Q
(stab_var name=a def @<stdin>:1)144.8 441 Q(CONSTANT: \(type=int\)3)
144.8 455 Q(})126.8 469 Q(f:)120.8 483 Q(.BB1.1)120.8 497 Q
(b{param} = ADD)168.8 511 Q(a{global},3)48 E(RETURN)168.8 525 Q
(AST Dump for function g:)120.8 553 Q(LIST {)126.8 567 Q(ASSIGNMENT)
132.8 581 Q(SELECT, member b2)138.8 595 Q
(stab_var name=x def @<stdin>:13)144.8 609 Q
(stab_var name=a def @<stdin>:1)138.8 623 Q(})126.8 637 Q(g:)120.8 651 Q
(.BB2.1)120.8 665 Q(%T00001 = LEA)168.8 679 Q(x{lvar})18 E
(%T00002 = ADD %T00001,4)168.8 693 Q(STORE a{global},[%T00002])168.8 707
Q 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(5/pg 4)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF(RETURN)168.8 105 Q F0 1.792(Discussion: My quad gen outpu\
t includes the assignment #4 AST dump output too.)63.2 118 R 1.792
(This is pretty handy for)7.292 F(deb)63.2 131 Q(ugging.)-.22 E 1.487
(By de\214nition, a Basic Block is a potential branch tar)63.2 157 R
4.237(get. It)-.198 F 1.487
(is started by a label, contains no additional labels)4.237 F
(within, and is terminated by a branch or e)63.2 170 Q 2.75(xit. I)-.165
F(am gi)2.75 E(ving my basic blocks labels of the form)-.275 E(.BB.F)
178.4 183 Q(.N)-.88 E .771(where F is a counter which increments with e\
ach function, and N is the basic block number within the function.)63.2
196 R .429(I'm thinking ahead to Assignment #6, where those labels will\
 become assembly language labels, and will need to)63.2 209 R 1.041(be \
unique within the entire output, not just unique within a single functi\
on \(because assembly language doesn')63.2 222 R(t)-.198 E(really kno)
63.2 235 Q 2.75(wa)-.275 G(bout scopes or namespaces\))-2.75 E -1.21(Yo)
63.2 261 S 3.393(uh)1.21 G -2.475 -.22(av e)-3.393 H .643(some \215e)
3.613 F .643(xibility in ho)-.165 F 3.393(wt)-.275 G 3.393(op)-3.393 G
.643(resent the quad operands in your output.)-3.393 F(Internally)6.143
E 3.393(,y)-.715 G .642(ou ha)-3.393 F .972 -.165(ve t)-.22 H 3.392(oh)
.165 G .642(old on to)-3.392 F .255
(the symbol table entries unless you w)63.2 274 R .255(ant to start e)
-.11 F .255(xposing the mechanics of local v)-.165 F .256
(ariable stack frame access no)-.275 F -.715(w.)-.275 G .481(What I')
63.2 287 R .811 -.165(ve d)-.55 H .481(one abo).165 F .811 -.165(ve i)
-.165 H 3.231(sg).165 G -2.365 -.275(iv e)-3.231 H 3.231(ac)3.506 G .48
(lue as to the nature of the v)-3.231 F .48(ariable \(e.g. {lv)-.275 F
.48(ar} for local; or {global}\).)-.275 F .48(Since this)5.98 F .038
(IR remains internal to the compiler \(other than for deb)63.2 300 R
.038(ugging output\) I can a)-.22 F -.22(vo)-.22 G .038
(id reporting other information \(such).22 F .855(as the of)63.2 313 R
.855(fset in the stack frame\) at this time.)-.275 F .855
(When we get to assignment #6, that bridge will need to be b)6.355 F
(urned)-.22 E(and/or crossed.)63.2 326 Q -1.21(Yo)63.2 352 S 2.779(um)
1.21 G .029(ay also note that I am gi)-2.779 F .03
(ving temporaries names which look lik)-.275 F 2.78(er)-.11 G -.165(eg)
-2.78 G 2.78(isters. Quads).165 F .03(are a theoretical, idealized)2.78
F .713
(assembly language where there is an in\214nite supply of "virtual re)
63.2 365 R .712(gisters" to hold temporary/ intermediate v)-.165 F
(alues.)-.275 E .434(During \214nal code generation, this in\214nite su\
pply will need to be reduced to the \214nite set of re)63.2 378 R .434
(gisters found on the)-.165 F(tar)63.2 391 Q(get, which is called "Re)
-.198 E(gister Allocation" and will be co)-.165 E -.165(ve)-.165 G
(red in unit 8.).165 E 4.294(Ih)63.2 417 S -2.475 -.22(av e)-4.294 H
1.544(chosen to e)4.514 F 1.543(xpose the access to structure members w\
ith the required memory address computations and)-.165 F 2.812
(load/stores. This)63.2 430 R .062(is in concordance with the philosoph)
2.812 F 2.812(yo)-.055 G 2.812(fa)-2.812 G -.22(vo)-3.032 G .062
(iding comple).22 F 2.812(xa)-.165 G .062
(ddressing modes for quad operands,)-2.812 F 1.55
(and of eliminating C language typing issues.)63.2 443 R 1.55
(Other IR schema, such as LL)7.05 F 1.55(VM, do things v)-1.1 F 1.55
(ery dif)-.165 F(ferently)-.275 E 4.3(,b)-.715 G(y)-4.3 E 1.497
(carrying through the idea of the struct type to the IR le)63.2 456 R
-.165(ve)-.275 G 4.248(l. As).165 F 1.498(mentioned abo)4.248 F -.165
(ve)-.165 G 4.248(,a).165 G 1.498(ssigning struct of)-4.248 F 1.498
(fsets no)-.275 F(w)-.275 E(requires us to kno)63.2 469 Q 2.75(wt)-.275
G(he \214nal tar)-2.75 E(get architecture.)-.198 E 3.26(Ih)63.2 495 S
-2.475 -.22(av e)-3.26 H .51(not e)3.48 F .51
(xposed the mechanism for accessing local v)-.165 F .51
(ariables, because this is tar)-.275 F 3.259(get-speci\214c. E.g.)-.198
F .509(on X86-32 it)3.259 F 1.999(will in)63.2 508 R -.22(vo)-.44 G(lv)
.22 E 4.749(ea)-.165 G 4.749(no)-4.749 G -.275(ff)-4.749 G 1.999
(set from the %ebp re).275 F(gister)-.165 E 4.749(,o)-.44 G 4.749(nS)
-4.749 G -1.012(PA)-4.749 G 2(RC it will be the %fp re)1.012 F(gister)
-.165 E 7.5(.W)-.605 G 2(hen these quads are)-7.5 F .885
(transformed into assembly \(Assignment #6\) the LEA of the local v)63.2
521 R .885(ar will be translated appropriately)-.275 F 6.384(.L)-.715 G
(ik)-6.384 E -.275(ew)-.11 G(ise,).275 E
(accesses to function parameters remain abstracted at this stage, and v)
63.2 534 Q(ary wildly by tar)-.275 E(get.)-.198 E F1(==================\
=========================================================)63.2 561 Q
(EXAMPLE 2)236 575 Q(==================================================\
=========================)63.2 589 Q(Input:)63.2 603 Q(int a[10];)120.8
617 Q(f\(\))120.8 645 Q({)120.8 659 Q(int x,*p;)126.8 673 Q(x=a[3];)
178.4 687 Q(p= &a[5];)178.4 701 Q 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(5/pg 5)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF(})120.8 105 Q(Output:)63.2 133 Q(AST Dump for function f:)
120.8 147 Q(LIST {)126.8 161 Q(ASSIGNMENT)132.8 175 Q
(stab_var name=x def @<stdin>:5)138.8 189 Q(DEREF)138.8 203 Q
(BINARY OP +)144.8 217 Q(stab_var name=a def @<stdin>:1)150.8 231 Q
(CONSTANT: \(type=int\)3)150.8 245 Q(ASSIGNMENT)132.8 259 Q
(stab_var name=p def @<stdin>:5)138.8 273 Q(ADDRESSOF)138.8 287 Q(DEREF)
144.8 301 Q(BINARY OP +)150.8 315 Q(stab_var name=a def @<stdin>:1)156.8
329 Q(CONSTANT: \(type=int\)5)156.8 343 Q(})126.8 357 Q(f:)120.8 371 Q
(.BB1.1)120.8 385 Q(x{lvar} = LOAD)168.8 399 Q([$a+12])48 E
(p{lvar} = MOV $a+20)168.8 413 Q(RETURN)168.8 427 Q F0(Discussion:)63.2
440 Q 3.252(Ih)63.2 466 S -2.475 -.22(av e)-3.252 H .503
(replaced the [] array subscripting operator in the AST with the equi)
3.472 F -.275(va)-.275 G .503(lent pointer e).275 F .503
(xpression, as de\214ned in)-.165 F(the C standard.)63.2 479 Q(This sim\
pli\214es the number of cases for which the quad generator needs to be \
coded.)5.5 E .742(The e)63.2 505 R .742(xpression $a+12 is an e)-.165 F
.742(xample of an address constant, i.e. a global symbol plus or minus \
an inte)-.165 F .742(ger of)-.165 F(fset.)-.275 E .11(There is a furthe\
r constant folding optimization in that the computation of the of)63.2
518 R .111(fset of the array element \(3*4\) has)-.275 F .366
(been replaced with the constant 12.)63.2 531 R -1.21(Yo)5.866 G 3.116
(ua)1.21 G .366
(re not required to perform either of these optimizations.)-3.116 F -.44
(Wi)5.866 G .366(thout them,).44 F(the multiply and add w)63.2 544 Q
(ould appear e)-.11 E(xplicitly:)-.165 E F1(f:)120.8 558 Q(.BB1.1)120.8
572 Q(%T00001 = MUL)178.4 586 Q(3,4)18 E(%T00002 = LEA a{global})178.4
600 Q(%T00003 = %T00001,%T00002)178.4 614 Q(x{lvar} = LOAD)178.4 628 Q
([%T00003])48 E(%T00004 = MUL)178.4 642 Q(5,4)18 E
(%T00005 = LEA a{global})178.4 656 Q(p{lvar} = ADD %T00004,%T00005)178.4
670 Q(RETURN)178.4 684 Q(==============================================\
=============================)63.2 698 Q 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(5/pg 6)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF(EXAMPLE 3)236 105 Q(=====================================\
======================================)63.2 119 Q(Input:)63.2 133 Q
(z\(\))120.8 147 Q({)120.8 161 Q(int a,b;)126.8 175 Q(if \(a<b\))178.4
189 Q(a=1;)236 203 Q(if \(b!=a\))178.4 217 Q(b=3;)236 231 Q(else)178.4
245 Q(a=3;)236 259 Q(})120.8 273 Q(Output:)63.2 301 Q
(AST Dump for function z:)120.8 315 Q(LIST {)126.8 329 Q(IF:)132.8 343 Q
(COMPARISON OP <)138.8 357 Q(stab_var name=a def @<stdin>:3)144.8 371 Q
(stab_var name=b def @<stdin>:3)144.8 385 Q(THEN:)132.8 399 Q
(ASSIGNMENT)138.8 413 Q(stab_var name=a def @<stdin>:3)144.8 427 Q
(CONSTANT: \(type=int\)1)144.8 441 Q(IF:)132.8 455 Q(COMPARISON OP !=)
138.8 469 Q(stab_var name=b def @<stdin>:3)144.8 483 Q
(stab_var name=a def @<stdin>:3)144.8 497 Q(THEN:)132.8 511 Q
(ASSIGNMENT)138.8 525 Q(stab_var name=b def @<stdin>:3)144.8 539 Q
(CONSTANT: \(type=int\)3)144.8 553 Q(ELSE:)132.8 567 Q(ASSIGNMENT)138.8
581 Q(stab_var name=a def @<stdin>:3)144.8 595 Q
(CONSTANT: \(type=int\)3)144.8 609 Q(})126.8 623 Q(z:)120.8 637 Q
(.BB1.1)120.8 651 Q 12(CMP a{lvar},b{lvar})168.8 665 R 18
(BRGE .BB1.3,.BB1.2)168.8 679 R(.BB1.2)120.8 707 Q 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(5/pg 7)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF(a{lvar} = MOV 1)168.8 105 Q 24(BR .BB1.3)168.8 119 R
(.BB1.3)120.8 147 Q 12(CMP b{lvar},a{lvar})168.8 161 R 18
(BREQ .BB1.5,.BB1.4)168.8 175 R(.BB1.4)120.8 189 Q(b{lvar} = MOV 3)168.8
203 Q 24(BR .BB1.6)168.8 217 R(.BB1.5)120.8 245 Q(a{lvar} = MOV 3)168.8
259 Q 24(BR .BB1.6)168.8 273 R(.BB1.6)120.8 301 Q(RETURN)168.8 315 Q F0
1.49(Discussion: I ha)63.2 328 R 1.82 -.165(ve c)-.22 H 1.49
(hosen to represent control \215o).165 F 4.241(wa)-.275 G 1.491
(mong basic blocks by e)-4.241 F 1.491(xplicitly listing the true and f)
-.165 F(alse)-.11 E .398(branch tar)63.2 341 R .398
(gets for each branch.)-.198 F .397
(It is not required that you do it this w)5.898 F(ay)-.11 E 5.897(.Y)
-.715 G .397(ou could also generate quads in which)-7.107 F .379
(only one branch tar)63.2 354 R .379(get is gi)-.198 F -.165(ve)-.275 G
.379(n, and it is implied that if the branch is f).165 F .379
(alse \(not tak)-.11 F .379(en\) that control f)-.11 F .38
(alls-through to)-.11 F 1.165(the ne)63.2 367 R 1.165(xt basic block.)
-.165 F 1.165(When using the 2-tar)6.665 F 1.164
(get approach, the order in which the basic blocks will e)-.198 F -.165
(ve)-.275 G 1.164(ntually be).165 F 1.287
(output into the assembler is not pre-determined, b)63.2 380 R 1.287
(ut will be decided by w)-.22 F 1.288(alking the control \215o)-.11 F
4.038(wg)-.275 G 4.038(raph. In)-4.038 F(the)4.038 E -.165(ex)63.2 393 S
1.039(ample abo).165 F -.165(ve)-.165 G 3.789(,s).165 G 1.039
(ince BB1.2 is the f)-3.789 F 1.039(alse tar)-.11 F 1.039
(get of BB1.1, BB1.2 w)-.198 F 1.039
(ould be output immediately after BB1.1)-.11 F(The)6.538 E
(unconditional branches to the ne)63.2 406 Q(xt BB w)-.165 E
(ould also be dropped out, e.g. the BR .BB1.6)-.11 E .62
(In both conditional e)63.2 432 R .62(xpressions, we see in)-.165 F
-.165(ve)-.44 G .62(rsion of the condition code and the tar).165 F .621
(gets, to a)-.198 F -.22(vo)-.22 G .621(id redundant jump-).22 F
(arounds, as discussed in class and lecture notes #5.)63.2 445 Q F1(===\
=======================================================================\
=)63.2 459 Q(EXAMPLE 4)236 473 Q(======================================\
=====================================)63.2 487 Q(Input:)63.2 501 Q
(int f\(\))120.8 515 Q({)120.8 529 Q(int a,b;)120.8 543 Q(a=g\(b+3,5\);)
120.8 557 Q(})120.8 571 Q(Output:)63.2 585 Q(AST Dump for function f:)
120.8 599 Q(LIST {)126.8 613 Q(ASSIGNMENT)132.8 627 Q
(stab_var name=a def @<stdin>:3)138.8 641 Q(FNCALL, 2 arguments)138.8
655 Q(stab_fn name=g def @<stdin>:4)144.8 669 Q(arg #1=)138.8 683 Q
(BINARY OP +)144.8 697 Q 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(5/pg 8)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF(stab_var name=b def @<stdin>:3)150.8 105 Q
(CONSTANT: \(type=int\)3)150.8 119 Q(arg #2=)138.8 133 Q
(CONSTANT: \(type=int\)5)144.8 147 Q(})126.8 161 Q(f:)120.8 175 Q
(.BB1.1)120.8 189 Q(%T00001 = ADD b{lvar},3)168.8 203 Q 12
(ARG 0,%T00001)168.8 217 R 12(ARG 1,5)168.8 231 R(a{lvar} = CALL)168.8
245 Q($g,2)12 E(RETURN)168.8 259 Q F0 .773(Discussion: I ha)63.2 272 R
1.103 -.165(ve r)-.22 H .772(epresented function calls with the CALL qu\
ad and introduced the ARG quad to tak).165 F 3.522(eav)-.11 G(alue)
-3.797 E 2.508(and pass it to the called function.)63.2 285 R 2.509
(The assembly-language implementation of ARG could v)8.008 F 2.509
(ary greatly)-.275 F 8.009(.O)-.715 G(n)-8.009 E .492(X86-32, it w)63.2
298 R .492(ould be a mo)-.11 F .492(vl to the stack at a positi)-.165 F
.821 -.165(ve o)-.275 H -.275(ff).165 G .491
(set from %esp, assuming the stack had been pre-adjusted).275 F .194
(as discussed in lecture notes #8, or a pushl, with the ar)63.2 311 R
.195(guments pushed in re)-.198 F -.165(ve)-.275 G .195(rse order).165 F
5.695(.O)-.605 G 2.945(nX)-5.695 G .195(86-64, it w)-2.945 F .195
(ould be a)-.11 F(mo)63.2 324 Q(vq to the appropriate re)-.165 E
(gister \(ag)-.165 E(ain, w)-.055 E
(ait for unit #8\) or the stack if there are more than 6 ar)-.11 E
(guments.)-.198 E .005(On SP)63.2 350 R .005(ARC the ARG w)-1.012 F .005
(ould translate to a MO)-.11 F 2.755(Vt)-.55 G 2.755(ot)-2.755 G .005
(he appropriate %oX re)-2.755 F .005(gister for ar)-.165 F .005
(gs 0 through 5, b)-.198 F .004(ut a mo)-.22 F .334 -.165(ve t)-.165 H
(o).165 E .814(the stack for higher)63.2 363 R .814(-numbered ar)-.22 F
3.564(guments. Because)-.198 F .814(the ar)3.564 F .815
(gument position might be needed to translate the ARG)-.198 F .207
(quad into assembly)63.2 376 R 2.957(,Ih)-.715 G -2.475 -.22(av e)-2.957
H .206
(included it as the \214rst source operand, and the total number of ar)
3.176 F .206(guments as well in the)-.198 F(CALL quad.)63.2 389 Q
(Alternately)63.2 415 Q 2.878(,y)-.715 G .128(ou could e)-2.878 F .128
(xtend the notion of the quad so that one of the operands w)-.165 F .128
(ould be a list of ar)-.11 F 2.879(guments. The)-.198 F -.165(ex)63.2
428 S(ample w).165 E(ould then look lik)-.11 E(e:)-.11 E F1(.BB1.1)120.8
442 Q(%T00001 = ADD b{lvar},3)168.8 456 Q(a{lvar} = CALL)168.8 470 Q
($g,\(%T00001,5\))12 E F0 .143(Note that the CALL tak)63.2 483 R .143
(es the address of the called function.)-.11 F -.77(Te)5.643 G
(chnically).77 E 2.893(,t)-.715 G .143(he tar)-2.893 F .142
(get address of the CALL could be)-.198 F(an)63.2 496 Q 3.181(ya)-.165 G
.431(rbitrary e)-3.181 F .431
(xpression which yields type "pointer to function".)-.165 F -1.21(Yo)
5.932 G 3.182(ua)1.21 G .432(re only required to handle simple function)
-3.182 F(calls where the tar)63.2 509 Q
(get is an identi\214er of function type.)-.198 E 0 Cg EP
%%Trailer
end
%%EOF
