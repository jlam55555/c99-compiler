%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Wed Feb  3 20:42:56 2021
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%DocumentSuppliedResources: file ast-examp.eps
%%+ procset grops 1.22 2
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0
ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(2/pg 1)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E/F1 10/Times-Bold@0 SF
(Assignment 2 - P)235.165 96 Q(arsing C Expr)-.1 E(essions)-.18 E F0 1.6
-.8(We n)63.2 126 T(eed to get started some).8 E
(where parsing the C language.)-.25 E 1.6 -.8(We c)5 H
(an think of the grammar as brok).8 E(en into 5 broad cate)-.1 E
(gories:)-.15 E(1\) declarations)63.2 150 Q(2\) function de\214nitions)
63.2 174 Q(3\) statements \(including blocks\))63.2 198 Q(4\) e)63.2 222
Q(xpressions)-.15 E(5\) miscellaneous constructs such as abstract types)
63.2 246 Q 3.789(Ag)63.2 270 S 1.289(ood place to start is e)-3.789 F
3.789(xpressions. In)-.15 F 1.289(this assignment, you')3.789 F 1.288
(ll construct the .y \214le to parse C language e)-.1 F 1.288
(xpressions, and)-.15 F .909(transform them into Abstract Syntax T)63.2
282 R .909(ree notation.)-.35 F -1.1(Yo)5.909 G(u')1.1 E .91
(ll also write a decoder for your AST data structures which allo)-.1 F
(ws)-.25 E(them to be visualized, e.g. by printing them out in plain te)
63.2 294 Q(xt.)-.15 E F1(The Expr)259.98 318 Q(ession Grammar)-.18 E F0
.694(The full grammar for C e)63.2 342 R .693
(xpressions can be found in H&S or the ISO C standard.)-.15 F .693
(Note that both sources use BNF notation)5.693 F .272(and break the e)
63.2 354 R .272(xpressions do)-.15 F .272(wn into indi)-.25 F .273
(vidual operator precedence le)-.25 F -.15(ve)-.25 G 2.773(ls. Y).15 F
.273(ou certainly can use this form, or you can mak)-1.1 F(e)-.1 E .05
(the grammar more compact by using Bison')63.2 366 R 2.55(so)-.55 G .05
(perator precedence features.)-2.55 F .05
(E.g. you could reduce this to primary e)5.05 F(xpressions,)-.15 E 1.126
(post\214x e)63.2 378 R 1.126(xpressions, unary e)-.15 F 1.126
(xpressions, binary e)-.15 F 1.127(xpressions, assignment e)-.15 F 1.127
(xpressions and ternary e)-.15 F 3.627(xpressions. An)-.15 F 3.627(ya)
-.15 G(pproach)-3.627 E
(you use is \214ne, as long as it correctly parses the language!)63.2
390 Q 1.6 -.8(To s)63.2 414 T
(implify your .y \214le at this early stage, we can mak).8 E 2.5(et)-.1
G(he follo)-2.5 E(wing assumptions:)-.25 E .928(1\) The top-le)63.2 438
R -.15(ve)-.25 G 3.428(lo).15 G 3.428(ft)-3.428 G .928
(he grammar is a list of e)-3.428 F .927(xpression statements.)-.15 F
.927(There are no function de\214nitions, declarations, or other)5.927 F
(kinds of statements, for no)63.2 450 Q 3.8 -.65(w. S)-.25 H 2.5(oy).65
G(our input looks lik)-2.5 E(e:)-.1 E/F2 10/Courier@0 SF(a=b+c/3;)63.2
464 Q(z?\(b/=3\):c++;)63.2 478 Q 6(etc; /*)63.2 492 R
(This is a valid expression statement! */)6 E F0 1.018(2\) W)63.2 516 R
3.518(ed)-.8 G(on')-3.518 E 3.518(th)-.18 G -2.25 -.2(av e)-3.518 H
1.018(abstract type names yet so you can')3.718 F 3.518(ti)-.18 G 1.018
(mplement the casting operator or the sizeof operator taking a type)
-3.518 F(name \(b)63.2 528 Q
(ut you can implement sizeof taking an ordinary e)-.2 E(xpression\).)
-.15 E(3\) W)63.2 552 Q 2.5(ed)-.8 G(on')-2.5 E 2.5(th)-.18 G -2.25 -.2
(av e)-2.5 H(declarations, scopes or symbol tables, so it is OK to repr\
esent identi\214ers as just their names for no)2.7 E -.65(w.)-.25 G F1
(Abstract Synax T)270.355 576 Q -.18(re)-.74 G(es).18 E F0 1.344
(As we get further into the class, we')63.2 600 R 1.343
(ll go into more detail about a type of intermediate representation kno)
-.1 F 1.343(wn as Abstract)-.25 F 1.624(Syntax T)63.2 612 R 4.124
(rees. Simply)-.35 F 1.624(put, the)4.124 F 4.124(ya)-.15 G 1.625(re a \
data structure which graphs the abstract relationships between the elem\
ents of the)-4.124 F(language as the)63.2 624 Q 2.5(yw)-.15 G
(ere parsed.)-2.5 E -.15(Fo)5 G 2.5(re).15 G(xample:)-2.65 E F2
(xyz=\(1024+abc\);)63.2 638 Q 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(2/pg 2)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E 0 0 216 391 -241.412
437 218 337.412 PBEGIN
%%BeginDocument: ast-examp.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Title: ast-examp.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5e
%%CreationDate: Wed Jan 30 02:44:31 2019
%%For: hak@lex ()
%%BoundingBox: 0 0 391 437
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 437 moveto 0 0 lineto 391 0 lineto 391 437 lineto closepath clip newpath
-192.5 562.6 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06000 0.06000 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Ellipse
7.500 slw
n 5625 3000 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 4117 5829 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 7353 5856 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 6233 8427 900 900 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 8804 8469 900 900 0 360 DrawEllipse gs col0 s gr

% Polyline
0 slj
0 slc
gs  clippath
4397 4818 m 4316 4946 l 4367 4978 l 4448 4850 l 4448 4850 l 4359 4936 l 4397 4818 l cp
eoclip
n 5100 3750 m
 4350 4950 l gs col0 s gr gr

% arrowhead
n 4397 4818 m 4359 4936 l 4448 4850 l  col0 s
% Polyline
gs  clippath
6871 4930 m 6959 5054 l 7008 5019 l 6920 4895 l 6920 4895 l 6965 5011 l 6871 4930 l cp
eoclip
n 6075 3750 m
 6975 5025 l gs col0 s gr gr

% arrowhead
n 6871 4930 m 6965 5011 l 6920 4895 l  col0 s
% Polyline
gs  clippath
6525 7381 m 6418 7489 l 6460 7531 l 6568 7424 l 6568 7424 l 6462 7488 l 6525 7381 l cp
eoclip
n 7200 6750 m
 6450 7500 l gs col0 s gr gr

% arrowhead
n 6525 7381 m 6462 7488 l 6568 7424 l  col0 s
% Polyline
gs  clippath
8223 7629 m 8308 7754 l 8358 7720 l 8272 7595 l 8272 7595 l 8316 7711 l 8223 7629 l cp
eoclip
n 7650 6750 m
 8325 7725 l gs col0 s gr gr

% arrowhead
n 8223 7629 m 8316 7711 l 8272 7595 l  col0 s
/Times-Roman ff 200.00 scf sf
5250 2625 m
gs 1 -1 sc (AST_binop) col0 sh gr
/Times-Roman ff 200.00 scf sf
4950 3075 m
gs 1 -1 sc (Operator: '=') col0 sh gr
/Times-Roman ff 200.00 scf sf
5175 3525 m
gs 1 -1 sc (L) col0 sh gr
/Times-Roman ff 200.00 scf sf
5925 3525 m
gs 1 -1 sc (R) col0 sh gr
/Times-Roman ff 200.00 scf sf
3750 5475 m
gs 1 -1 sc (AST_ident) col0 sh gr
/Times-Roman ff 200.00 scf sf
3450 5925 m
gs 1 -1 sc (Name: "xyz") col0 sh gr
/Times-Roman ff 200.00 scf sf
7050 5475 m
gs 1 -1 sc (AST_binop) col0 sh gr
/Times-Roman ff 200.00 scf sf
6675 5850 m
gs 1 -1 sc (operator: '+') col0 sh gr
/Times-Roman ff 200.00 scf sf
5850 8025 m
gs 1 -1 sc (AST_num) col0 sh gr
/Times-Roman ff 200.00 scf sf
5550 8325 m
gs 1 -1 sc (Numtype: INTEGER) col0 sh gr
/Times-Roman ff 200.00 scf sf
5550 8625 m
gs 1 -1 sc (Value: 1024) col0 sh gr
/Times-Roman ff 200.00 scf sf
8475 8025 m
gs 1 -1 sc (AST_ident) col0 sh gr
/Times-Roman ff 200.00 scf sf
8175 8550 m
gs 1 -1 sc (name: "abc") col0 sh gr
/Times-Roman ff 200.00 scf sf
6900 6375 m
gs 1 -1 sc (L) col0 sh gr
/Times-Roman ff 200.00 scf sf
7650 6375 m
gs 1 -1 sc (R) col0 sh gr
% here ends figure;
pagefooter
showpage
%%Trailer
%EOF
%%EndDocument
end PEND 1.955 -.8(We s)63.2 367.412 T .354(ee that this e).8 F .354(xp\
ression can be represented as a graph where each node has a speci\214c \
type and contains \214elds that pertain)-.15 F .524(to its purpose.)63.2
379.412 R .524
(The AST_binop node contains left and right pointers to its tw)5.524 F
3.024(oo)-.1 G .525(perands, plus a \214eld to contain the operator)
-3.024 F(.)-.55 E .178(In this e)63.2 391.412 R .178(xample, I en)-.15 F
.178(vision using the tok)-.4 F .178
(en code to represent the operator b)-.1 F .177
(ut the actual design and implementation is quite up)-.2 F(to you.)63.2
403.412 Q 1.559(Notice that the parenthesized e)63.2 427.412 R 1.559
(xpression does not appear in the AST)-.15 F 6.56(.T)-.74 G(hat')-6.56 E
4.06(sw)-.55 G 1.56(hat mak)-4.06 F 1.56
(es it an "abstract" syntax tree, as)-.1 F .242
(opposed to the literal parse tree.)63.2 439.412 R -.15(Pa)5.242 G .242
(rentheses serv).15 F 2.742(en)-.15 G 2.742(os)-2.742 G .242
(emantic purpose.)-2.742 F(The)5.242 E 2.741(ya)-.15 G .241
(re in the language for syntactic reasons only)-2.741 F(,)-.65 E .456
(to o)63.2 451.412 R -.15(ve)-.15 G .456(rride the def).15 F .456
(ault order of operations.)-.1 F .457(Once we parse the e)5.456 F .457
(xpression, there is no reason to complicate the AST with the)-.15 F
(memory of the parentheses!)63.2 463.412 Q -1.1(Yo)63.2 487.412 S(u')1.1
E .406(ll also notice that for identi\214ers and numbers, the \214elds \
contained in those nodes are basically the same as what you did)-.1 F
(in assignment #1 \(le)63.2 499.412 Q -.15(xe)-.15 G 2.5(r\). As).15 F
(we get deeper into the project, this might require more re\214nement.)
2.5 E/F1 10/Times-Bold@0 SF(Printing out AST)279.05 523.412 Q F0 1.6 -.8
(We n)63.2 547.412 T(eed a w).8 E(ay to print out the AST to mak)-.1 E
2.5(es)-.1 G(ure it is actually constructed correctly!)-2.5 E
(Here is a simple, te)5 E(xt-based w)-.15 E(ay:)-.1 E/F2 10/Courier@0 SF
(ASSIGNMENT)75.2 561.412 Q(IDENT xyz)87.2 575.412 Q(BINARY OP +)87.2
589.412 Q(NUM: \(numtype=int\)1024)99.2 603.412 Q(IDENT abc)99.2 617.412
Q F0 1.196(Notice that indentation is used to represent the depth le)
63.2 629.412 R -.15(ve)-.25 G 1.197(ls of the tree.).15 F 1.197
(Matching it up to the graphical e)6.197 F 1.197(xample abo)-.15 F 1.497
-.15(ve i)-.15 H(t).15 E(should be readily apparent ho)63.2 641.412 Q
2.5(wt)-.25 G 2.5(or)-2.5 G(ecursi)-2.5 E -.15(ve)-.25 G
(ly descend an AST and k).15 E(eep track of the indentation le)-.1 E
-.15(ve)-.25 G(ls.).15 E F1(Shortcuts/Equi)264.705 665.412 Q -.1(va)-.1
G(lencies).1 E F0 .333
(Certain language constructs are semantically equi)63.2 689.412 R -.25
(va)-.25 G .333(lent to certain other constructs, which can reduce the \
amount of code and).25 F(comple)63.2 701.412 Q(xity needed in your AST)
-.15 E 5(.F)-.74 G(or e)-5.15 E(xample, the e)-.15 E(xpression)-.15 E F2
(a+=b)2.5 E F0 .001(is e)2.501 F .001(xactly equi)-.15 F -.25(va)-.25 G
.001(lent to).25 F F2(a=a+b)2.501 E F0 5.001(.I)C 2.501(ti)-5.001 G
2.501(sa)-2.501 G .001(dvisable to esche)-2.501 F(w)-.25 E 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(2/pg 3)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E(ha)63.2 96 Q 1.505
(ving a += AST node because that will just be e)-.2 F 1.505
(xtra code that you need to carry around for the rest of your compiler)
-.15 F(,)-.4 E(including code generation!)63.2 108 Q(Instead, apply the\
 transformation and construct the AST as if it had been parsed the seco\
nd w)5 E(ay)-.1 E(.)-.65 E
(There will be other similar opportunities such as:)63.2 132 Q/F1 10
/Courier@0 SF 6(a[b] ===> *\(a+b\))63.2 146 R 6(a->b ===> \(*a\).b)63.2
160 R 12(--a ===>)63.2 174 R 52.8(\(a=a-1\) /*)12 F
(But not a++ nor a-- !!! */)6 E 12(++a ===>)63.2 188 R(\(a=a+1\))12 E/F2
10/Times-Bold@0 SF(Implementations of AST)263.5 200 Q F0 .527
(There are so man)63.2 224 R 3.027(yw)-.15 G .527
(ays to code ASTs that it w)-3.127 F .527
(ould be pointless to try to list them here.)-.1 F .527
(Because the AST node is v)5.527 F(ariadic,)-.25 E
(you need a "tag" or "discriminator" to tell you what is inside.)63.2
236 Q(In C, this could be implemented lik)5 E 2.5(et)-.1 G(his:)-2.5 E
F1(struct astnode {)63.2 250 Q(int nodetype;)120.8 264 Q
(union astnodes {)120.8 278 Q(struct astnode_binop binop;)178.4 292 Q
(struct astnode_num)178.4 306 Q(num;)12 E(struct astnode_ident ident;)
178.4 320 Q(/* etc. */)178.4 334 Q 6(}u)120.8 348 S(;)-6 E(};)63.2 362 Q
F0 .494(This has the slight ugliness of ha)63.2 374 R .494(ving to in)
-.2 F -.2(vo)-.4 G(lv).2 E 2.993(et)-.15 G .493(he e)-2.993 F .493
(xtraneous reference to element)-.15 F F1(u)2.993 E F0(whene)2.993 E
-.15(ve)-.25 G 2.993(ry).15 G .493(ou need to access an AST)-2.993 F
3.233(node. But)63.2 386 R .733(if you use the GCC e)3.233 F .733
(xtension kno)-.15 F .733(wn as "blind /anon)-.25 F .734
(ymous unions" then you can a)-.15 F -.2(vo)-.2 G .734(id that.).2 F
.734(This e)5.734 F .734(xtension has)-.15 F(no)63.2 398 Q 2.5(wm)-.25 G
(ade it into the C-11 standard so an)-2.5 E 2.5(ym)-.15 G
(odern compiler w)-2.5 E(ould support it.)-.1 E(I')5 E .3 -.15(ve a)-.5
H(lso seen students approach it lik).15 E 2.5(et)-.1 G(his:)-2.5 E F1
(struct astnode {)63.2 412 Q(int nodetype;)120.8 426 Q
(struct astnode *pointers[SOME_REASONABLE_NUMBER];)120.8 440 Q
(int nchild;)120.8 454 Q(union astnode_values {)120.8 468 Q
(struct astnode_binop binop;)178.4 482 Q(/* etc. */)178.4 496 Q 6(}v)
120.8 510 S(al;)-6 E(};)63.2 524 Q F0 .126
(Here the tree structure of the AST is e)63.2 536 R .126
(xposed at the top le)-.15 F -.15(ve)-.25 G 2.626(lr).15 G .126
(ather than being inside each indi)-2.626 F .126(vidual ast node type.)
-.25 F .126(There are)5.126 F(man)63.2 548 Q 1.3 -.65(y, m)-.15 H(an).65
E 2.5(yd)-.15 G(if)-2.5 E(ferent w)-.25 E(ays to do this.)-.1 E
(Here is a slightly dirty w)5 E(ay:)-.1 E F1(struct astnode_binop {)63.2
562 Q(int nodetype;)120.8 576 Q(int operator;)120.8 590 Q
(union astnode *left,*right;)120.8 604 Q(};)63.2 618 Q(union astnode {)
63.2 646 Q(struct astnode_generic {int nodetype;} generic;)120.8 660 Q
(struct astnode_binop binop;)120.8 674 Q(struct astnode_num num;)120.8
688 Q(/* etc.*/)120.8 702 Q 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(2/pg 4)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E/F1 10/Courier@0 SF(})
63.2 98 Q F0 1.254(Here we rely on the f)63.2 110 R 1.254
(act that structs will al)-.1 F -.1(wa)-.1 G 1.254
(ys be laid out consistently).1 F 3.754(,a)-.65 G 1.255
(nd de\214ne a series of structs that share the \214rst)-3.754 F
(element \(the node type tag\).)63.2 122 Q/F2 10/Times-Bold@0 SF
(Some Bison T)276.365 146 Q(ricks)-.74 E F0 -1.1(Yo)63.2 170 S 3.358(ua)
1.1 G .858(re de\214nitely going to w)-3.358 F .858(ant to mak)-.1 F
3.358(ey)-.1 G .857(our Bison grammar fully typed and use the)-3.358 F
F1(%union)3.357 E F0(and)3.357 E F1(%type)3.357 E F0(directi)3.357 E
-.15(ve)-.25 G 3.357(s. T).15 F(o)-.8 E .795(create a nested AST)63.2
182 R 3.295(,i)-.74 G 3.295(tw)-3.295 G .795(ill be v)-3.295 F .795
(ery helpful if you mak)-.15 F 3.296(et)-.1 G .796
(he type of the grammar symbols such as)-3.296 F F1(expr)3.296 E F0 .796
(be a pointer to an)3.296 F(AST node.)63.2 194 Q(Then you can create ad\
ditional AST nodes as needed and chain together pointers.)5 E(E.g.)5 E
F1(%union {)63.2 208 Q(struct astnode *astnode_p;)120.8 222 Q(})63.2 236
Q(%type <astnode_p> binary_expr)63.2 264 Q(%%)63.2 278 Q(binary_expr:)
63.2 292 Q(binary_expr '+' binary_expr {)120.8 306 Q
($$=astnode_alloc\(AST_binop\);)236 320 Q(struct astnode_binop *n=$$;)
236 334 Q(n->operator='+';)236 348 Q(n->left=$1;)236 362 Q(n->right=$3;)
236 376 Q(})236 390 Q F0 .798(The abo)63.2 402 R 1.098 -.15(ve i)-.15 H
3.298(sj).15 G .798(ust a representati)-3.298 F 1.098 -.15(ve s)-.25 H
.798(nippet and your code might be signi\214cantly dif).15 F .797
(ferent, depending on ho)-.25 F 3.297(wy)-.25 G .797(ou implement)-3.297
F(ASTs and ho)63.2 414 Q 2.5(wy)-.25 G(ou structure your grammar)-2.5 E
(.)-.55 E F2(Submission)291.545 450 Q F0 -1.1(Yo)63.2 474 S .249
(ur program should accept a list of e)1.1 F .249(xpression statements.)
-.15 F .249
(After it sees each one, it should print out the AST representation)
5.249 F .56(of that statement.)63.2 486 R(Alternati)5.56 E -.15(ve)-.25
G(ly).15 E 3.06(,y)-.65 G .56(ou could ha)-3.06 F .86 -.15(ve a)-.2 H
3.06(nA).15 G .559(ST construction for a "LIST" and b)-3.06 F .559
(uild the list of e)-.2 F .559(xpression ASTs for)-.15 F
(the entire input, and output e)63.2 498 Q -.15(ve)-.25 G
(rything upon reaching EOF).15 E(.)-.8 E 2.5(Ih)63.2 522 S -2.25 -.2
(av e)-2.5 H(included some test cases b)2.7 E(ut the)-.2 E 2.5(ya)-.15 G
(re by no means e)-2.5 E(xhausti)-.15 E -.15(ve)-.25 G(.).15 E 0 Cg EP
%%Trailer
end
%%EOF
