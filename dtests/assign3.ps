%!PS-Adobe-3.0
%%Creator: groff version 1.22.2
%%CreationDate: Tue Feb 23 17:54:34 2021
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%+ font Times-Italic
%%DocumentSuppliedResources: procset grops 1.22 2
%%Pages: 6
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.22 2
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
DEFS/BPhook known{DEFS begin BPhook end}if
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne
2 index/UniqueID ne
and
{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
mark
}bind def
/PEND{
cleartomark
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Courier
%%IncludeResource: font Times-Italic
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Italic@0 ENC0/Times-Italic RE/Courier@0 ENC0/Courier RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF 162.51(ECE466:Compilers PS)43.2 48 R(3/pg 1)2.5
E(\2512021 Jef)166.58 E 2.5(fH)-.25 G(akner)-2.5 E/F1 11/Times-Bold@0 SF
(ASSIGNMENT #3: Declarations, Symbols and T)191.205 97 Q(ypes)-.374 E/F2
11/Times-Roman@0 SF .168(At the conclusion of this assignment, your com\
piler will be able to parse C language declarations and construct an)
63.2 136 R(internal representation of symbols and types and which will \
support scoping rules.)63.2 149 Q F1(The Symbol T)273.413 188 Q(able)
-1.012 E F2 .029
(As discussed in lecture notes for Unit #4 \(Semantic Analysis\) a k)
63.2 214 R .359 -.165(ey c)-.11 H .029
(omponent of your compiler is a symbol table.).165 F -.165(Fo)63.2 227 S
2.75(rt).165 G(his assignment, your symbol table should support:)-2.75 E
3.394<8354>70 240 S .644(he ability to ha)-3.394 F .973 -.165(ve d)-.22
H(if).165 E .643(ferent attrib)-.275 F .643(utes for the dif)-.22 F .643
(ferent roles which IDENTIFIERs play in the C language.)-.275 F(At)6.143
E .009(this point in the course, some of these attrib)92 253 R .009
(utes don')-.22 F 2.76(tm)-.198 G(ak)-2.76 E 2.76(es)-.11 G .01
(ense yet, b)-2.76 F .01(ut you should ha)-.22 F .34 -.165(ve t)-.22 H
.01(he frame).165 F -.11(wo)-.275 G .01(rk in).11 F 2.75(place. In)92
266 R(particular)2.75 E 2.75(,f)-.44 G(or v)-2.75 E
(ariables, you should be able to set a storage class.)-.275 E 2.75<8354>
70 279 S
(he four identi\214er namespaces \(tags, labels, members, and "e)-2.75 E
-.165(ve)-.275 G(rything else"\)).165 E 2.898<8341>70 292 S .147(ll fou\
r types of scopes \(\214le, function, block and prototype\) as well as \
arbitrary nesting of scopes to an)-2.898 F 2.897(yd)-.165 G(epth.)-2.897
E 4.395 -.88(We w)92 305 T 2.635(ill be making prototypes optional, b)
.88 F 2.635(ut you should still pro)-.22 F 2.635
(vide a hook in the symbol table for)-.165 F
(supporting this type of scope.)92 318 Q 3.079<834b>70 331 S .328(eepin\
g track of what the "current" scope is, and being able to look up a gi)
-3.354 F -.165(ve)-.275 G 3.078(ni).165 G .328(denti\214er in a gi)
-3.078 F -.165(ve)-.275 G 3.078(nn).165 G(amespace)-3.078 E .708
(starting from a gi)92 344 R -.165(ve)-.275 G 3.458(ns).165 G .708
(cope and w)-3.458 F .708(orking up through the outer enclosing scopes \
up to and including global)-.11 F(scope.)92 357 Q 3.154<8349>70 370 S
.404(nstalling a ne)-3.154 F 3.154(ws)-.275 G .404(ymbol into a gi)
-3.154 F -.165(ve)-.275 G 3.154(ns).165 G .404(ymbol table. Pro)-3.154 F
.403(vide an option for handling the attempted installation of)-.165 F
.481(an identi\214er with the same name and same namespace: either allo)
92 383 R 3.232(wd)-.275 G .482
(uplicate de\214nition \(see lecture notes\),)-3.232 F(or thro)92 396 Q
2.75(wa)-.275 G 2.75(ne)-2.75 G(rror)-2.75 E(.)-.605 E F1(AST Repr)
247.079 422 Q(esentation of T)-.198 E(ypes)-.374 E F2 .403(As discussed\
 in lecture notes and in class, the AST mechanism which you be)63.2 448
R -.055(ga)-.165 G 3.153(nt).055 G 3.152(od)-3.153 G -2.365 -.275(ev e)
-3.152 H .402(lop in assignment #2 can).275 F .527(be readily e)63.2 461
R .527(xtended to support the representation of arbitrarily complicated\
 C types.)-.165 F -1.21(Yo)6.027 G(u')1.21 E .527(ll w)-.11 F .527
(ant to de)-.11 F -.165(ve)-.275 G .528(lop AST).165 F .291(nodes repre\
senting scalar types, pointers, arrays and functions, as well as some m\
echanism \(e.g. the "mini symbol)63.2 474 R .144
(table" approach\) for representing structure and union types.)63.2 487
R -1.21(Yo)5.644 G(u')1.21 E .144(ll de\214nitely w)-.11 F .144
(ant to write a system of "dumping")-.11 F 4.949(ag)63.2 500 S -2.365
-.275(iv e)-4.949 H 4.949(nA).275 G 2.198
(ST or portion of an AST to plain te)-4.949 F 2.198
(xt, so you can determine if your declarations parsing code is)-.165 F
.942(producing the correct type representation!)63.2 513 R .943
(This should be a straightforw)6.443 F .943(ard e)-.11 F .943
(xtension of the code which you')-.165 F -.165(ve)-.55 G(already de)63.2
526 Q -.165(ve)-.275 G(loped in assignment 2.).165 E 1.256
(Read the lecture notes carefully with re)63.2 552 R -.055(ga)-.165 G
1.255(rd to constructing type-representing AST during parsing and ho)
.055 F 4.005(wt)-.275 G(he)-4.005 E(AST naturally comes out "backw)63.2
565 Q 2.75(ards." The)-.11 F(notes discuss a fe)2.75 E 2.75(wp)-.275 G
(otential w)-2.75 E(ays to address this.)-.11 E F1(THINGS Y)224.958 578
Q(OU DON'T HA)-.385 E(VE T)-1.595 E 2.75(OD)-.198 G(O:)-2.75 E F2 .212
(This is probably the paragraph that you ha)63.2 617 R .542 -.165(ve r)
-.22 H .212(ead \214rst!).165 F .213
(In order to simplify the compiler and mak)5.712 F 2.963(ei)-.11 G 2.963
(tf)-2.963 G .213(easible as a)-2.963 F .29
(one-semester project, a number of C language features will be remo)63.2
630 R -.165(ve)-.165 G 3.04(df).165 G .29(rom the spec.)-3.04 F -1.21
(Yo)5.79 G 3.04(um)1.21 G .29(ay attempt them for)-3.04 F 2.445(your o)
63.2 643 R 2.445(wn amusement, b)-.275 F 2.445(ut in some cases the)-.22
F 5.195(ya)-.165 G 2.445(re so dif)-5.195 F 2.445
(\214cult that doing so is not advised.)-.275 F -.44(Wi)7.946 G 2.446
(th re).44 F -.055(ga)-.165 G 2.446(rd to).055 F
(Assignment #3, the follo)63.2 656 Q(wing items are optional:)-.275 E
2.75<8349>70 669 S(nitialized declarations)-2.75 E 4.017<8363>70 682 S
1.267(omplicated constant e)-4.017 F 1.267
(xpressions used within an array declarator)-.165 F 6.767(.e)-.605 G
1.267(.g. you don')-6.767 F 4.016(th)-.198 G -2.475 -.22(av e)-4.016 H
1.266(to parse char a[2+2];)4.236 F -1.21(Yo)92 695 S 2.75(um)1.21 G
(ay assume that array declarators are either [] or [NUMBER])-2.75 E 2.75
<8343>70 708 S(99 v)-2.75 E(ariable-length arrays \(v)-.275 E(ery dif)
-.165 E(\214cult\))-.275 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(3/pg 2)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E 2.75<8351>70
104 S(uali\214ers such as const, v)-2.75 E(olatile and restrict.)-.22 E
(ho)5.5 E(we)-.275 E -.165(ve)-.275 G .88 -.44(r, y).165 H
(ou should still allo).44 E 2.75(wt)-.275 G(hose k)-2.75 E -.165(ey)-.11
G -.11(wo).165 G(rds in the grammar).11 E 2.75<8343>70 117 S
(99 inline functions)-2.75 E 2.75<8365>70 130 S(nums \(not that dif)
-2.75 E(\214cult\))-.275 E 2.75<8362>70 143 S
(it \214elds in structure de\214nitions)-2.75 E 2.803<8370>70 156 S .053
(rototypes/formal parameter lists.)-2.803 F .053
(This is a major simpli\214cation.)5.553 F .053(If you w)5.553 F .054
(ant to try it, it is moderately dif)-.11 F(\214cult,)-.275 E 1.291
(to e)92 169 R 1.291(xtremely dif)-.165 F 1.291(\214cult if you w)-.275
F 1.291(ant it to w)-.11 F 1.29(ork 100% correctly with typedefs.)-.11 F
1.29(Instead you are permitted to)6.79 F
(assume that all function declarators are just \(\), i.e.)92 182 Q
(taking unkno)5.5 E(wn ar)-.275 E(guments.)-.198 E 2.75<834b>70 195 S
(&R-style function de\214nitions \(v)-2.75 E(ery old form\))-.165 E
3.778<8374>70 208 S 1.028(ypedefs: Getting typedef w)-3.778 F 1.028
(orking in its simplest form, e.g.)-.11 F/F1 11/Courier@0 SF 1.029
(typedef int iii; iii var;)6.529 F F0 1.029(is not too)3.779 F(dif)92
221 Q .683(\214cult, b)-.275 F .683
(ut handling all possible cases including ambiguity in)-.22 F -.22(vo)
-.44 G .682(lving typedef names getting red\214ned in a).22 F
(declaration, is e)92 234 Q(xtremely dif)-.165 E 2.75(\214cult. The)
-.275 F(lecture notes contain a discussion of some pathological cases.)
2.75 E/F2 11/Times-Bold@0 SF(Grammar issues)277.351 260 Q F0(The top-le)
63.2 286 Q -.165(ve)-.275 G 2.75(lo).165 G 2.75(ft)-2.75 G
(he language no)-2.75 E 2.75(wc)-.275 G(onsists of a list of)-2.75 E/F3
10/Courier@0 SF(declaration_or_fndef: declaration)63.2 300 Q 30(|f)178.4
314 S(unction_definition)-30 E(;)178.4 328 Q F0 .571
(Declarations made at this top-le)63.2 341 R -.165(ve)-.275 G 3.321(lc)
.165 G .571(an be assumed to ha)-3.321 F .901 -.165(ve a s)-.22 H .571
(torage class of EXTERN.).165 F -.165(Fo)6.071 G 3.322(rn).165 G -.275
(ow)-3.322 G 3.322(,w)-.44 G 3.322(ec)-3.322 G .572(an ignore)-3.322 F
.729(the distinction of what happens when the k)63.2 354 R -.165(ey)-.11
G -.11(wo).165 G(rd).11 E F1(static)3.478 E F0(or)3.478 E F1(extern)
3.478 E F0 3.478(appears. This)3.478 F .728(will not be an issue until)
3.478 F(we get to the unit on tar)63.2 367 Q(get code generation and ho)
-.198 E 2.75(wt)-.275 G(he link)-2.75 E(er w)-.11 E(orks.)-.11 E
(Function)63.2 393 Q/F4 11/Times-Italic@0 SF(de\214nitions)3.049 E F0
.299(can only appear at this top le)3.049 F -.165(ve)-.275 G 3.049(lo)
.165 G 3.049(ft)-3.049 G .299(he grammar)-3.049 F 5.799(.N)-.605 G .299
(ote that a function)-5.799 F F4(de\214nition)3.05 E F0(also)3.05 E F4
(declar)3.05 E(es)-.407 E F0 .711(that function')63.2 406 R 3.461(sn)
-.605 G .711
(ame globally as a symbol of identi\214er class FUNCTION, ha)-3.461 F
.71(ving the type FUNCTION\(returning)-.22 F(X, taking P\).)63.2 419 Q
2.75(Aw)5.5 G(orkable grammar rule for function de\214nition is:)-2.86 E
F3(function_definition:)63.2 433 Q
(decl_specifiers declarator compound_statement)120.8 447 Q F0 1.27
(This grammar rule does not permit the short-hand notation such as)63.2
460 R F1 1.27(f\(\) { return;})4.02 F F0 1.271(where the declaration)
4.021 F .175(speci\214ers are missing and the return v)63.2 473 R .175
(alue def)-.275 F .175(aults to int.)-.11 F .175(It also doesn')5.675 F
2.925(ts)-.198 G .175(upport K&R style declarations.)-2.925 F(Consult)
5.675 E(the C language standard or H&S for a fuller discussion of funct\
ion de\214nitions.)63.2 486 Q -.165(Fo)63.2 512 S 2.75(ro).165 G
(ur purposes at this time, we could de\214ne)-2.75 E F3
(compound_statement: '{' decl_or_stmt_list '}')63.2 526 Q(decl_or_stmt:)
63.2 554 Q(declaration)120.8 568 Q(|statement)120.8 582 Q(;)120.8 596 Q
(statement:)63.2 624 Q(compound_statement)120.8 638 Q 6(|e)120.8 652 S
(xpression ';')-6 E(;)120.8 666 Q F0 1.262(Note that the semicolon is p\
art of the grammar rule for a declaration \(I am deliberately not pro)
63.2 692 R 1.263(viding this rule)-.165 F(abo)63.2 705 Q -.165(ve)-.165
G 3.338(,t).165 G .588(his is part of what you need to w)-3.338 F .588
(ork out\) and certain kinds of statements.)-.11 F .587
(At this point in the course, we)6.088 F 0 Cg EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(3/pg 3)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E .763
(do not ha)63.2 104 R 1.093 -.165(ve c)-.22 H .763(ontrol \215o).165 F
3.513(ws)-.275 G .763(tatements such as if/else, while, for)-3.513 F
3.513(,r)-.44 G .763(eturn, break, switch, etc.)-3.513 F .763
(Therefore the only tw)6.263 F(o)-.11 E 2.305
(statements we support are e)63.2 117 R 2.305
(xpression statements \(you ha)-.165 F 2.635 -.165(ve t)-.22 H 2.305
(hose from assignmnent #2\) and no).165 F 5.055(wc)-.275 G(ompound)
-5.055 E(statements \(we need these to introduce inner block scopes\))
63.2 130 Q 1.206(In assignment #2, you had to lea)63.2 156 R 1.537 -.165
(ve o)-.22 H 1.207(ut tw).165 F 3.957(ot)-.11 G 1.207(hings from the e)
-3.957 F 1.207(xpression grammar: casts, and the sizeof operator)-.165 F
1.417(taking an abstract type name.)63.2 169 R -1.21(Yo)6.917 G 4.167
(uw)1.21 G 1.417(ill no)-4.167 F 4.167(wh)-.275 G -2.475 -.22(av e)
-4.167 H 1.416
(the ability to recognize abstract type names \(the syntax is a)4.387 F
.373(simpli\214cation of the re)63.2 182 R .373(gular declarations synt\
ax\) and so you can circle back and add those tw)-.165 F 3.124(ot)-.11 G
.374(hings to mak)-3.124 F 3.124(et)-.11 G(he)-3.124 E -.165(ex)63.2 195
S(pression grammar essentially complete.).165 E/F1 11/Times-Bold@0 SF
(Pr)215.883 234 Q(ogram beha)-.198 E(vior / what y)-.275 E(ou HA)-.275 E
(VE to do!)-1.595 E F0(1\) Y)63.2 260 Q
(our program will accept the output of cpp \(gcc -E\), just lik)-1.21 E
2.75(ei)-.11 G 2.75(na)-2.75 G(ssignment #2.)-2.75 E 2.129(2\) Whene)
63.2 286 R -.165(ve)-.275 G 4.879(ry).165 G 2.129
(ou see a declaration of an identi\214er as a function, typedef or v)
-4.879 F 2.128(ariable, you will print out the)-.275 F(follo)63.2 299 Q
(wing:)-.275 E 2.75<836e>70 312 S
(ame of the identi\214er being declared)-2.75 E 2.75<838c>70 325 S
(le/line at which the declaration is ef)-2.75 E(fecti)-.275 E -.165(ve)
-.275 G 2.855<8374>70 338 S .105
(he scope in which the declaration is rooted \(gi)-2.855 F .435 -.165
(ve t)-.275 H .105
(ype of scope \(e.g. global, prototype, function\) and \214le/line of)
.165 F(scope start \))92 351 Q 2.75<8377>70 364 S
(hat the identi\214er is being used for \(e.g. typedef,v)-2.75 E(ar)
-.275 E(,fn\))-.44 E 2.75<8373>70 377 S(torage class \(if applicable\))
-2.75 E 2.75<8364>70 390 S(ata type \(more belo)-2.75 E(w\))-.275 E .764
(3\) In se)63.2 416 R -.165(ve)-.275 G .764(ral places you will need to\
 output a human-readable representation of whate).165 F -.165(ve)-.275 G
3.513(ri).165 G .763(nternal data structures)-3.513 F .201
(you create to manipulate types.)63.2 429 R .201(As types ha)5.701 F
.532 -.165(ve a p)-.22 H .202
(otentially complicated, nested structure, one possible choice is a).165
F(series of indented lines, e.g.)63.2 442 Q/F2 10/Courier@0 SF
(pointer to)178.4 456 Q(pointer to)196.4 470 Q
(array of 10 elements of type)208.4 484 Q(pointer to)220.4 498 Q(int)
232.4 512 Q F0(Another possibility is using braces, brack)63.2 538 Q
(ets or parentheses, e.g.)-.11 E F2
(pointer\(pointer\(array[10] \(pointer\(int\)\)\)\))178.4 552 Q F0 -1.21
(Yo)63.2 565 S 2.75(uc)1.21 G
(ould also output the result in the style of a C type name:)-2.75 E F2
(\(int *\(**\)[10]\))178.4 579 Q F0 .351(The latter is more compact b)
63.2 592 R .351(ut also harder to generate and more confusing to read, \
especially if you, yourself, are)-.22 F(ha)63.2 605 Q(ving dif)-.22 E
(\214culty follo)-.275 E(wing C type name abstract declarator syntax!)
-.275 E 1.269(4\) Whene)63.2 631 R -.165(ve)-.275 G 4.019(ras).165 G
1.27(truct or union is)-4.019 F/F3 11/Times-Italic@0 SF(de\214ned)4.02 E
F0 1.27(\(i.e. with a pair of braces and a list of members inside\), pr\
int out the)4.02 F .813(\214le/line at which this de\214nition is happe\
ning, and the scope in which it is rooted \(remember)63.2 644 R 3.563
(,n)-.44 G .813(ested struct/union)-3.563 F 2.595
(de\214nitions are not rooted in the struct/union scope itself\).)63.2
657 R 2.595(Then print out the declaration of each member)8.095 F(.)
-.605 E .463(Depending on ho)63.2 670 R 3.213(wy)-.275 G .462
(ou handle the table of members, it may not be con)-3.213 F -.165(ve)
-.44 G .462(nient to list the members in the order of).165 F
(their declaration, so you don')63.2 683 Q 2.75(th)-.198 G -2.475 -.22
(av e)-2.75 H(to do that...just mak)2.97 E 2.75(es)-.11 G(ure to co)
-2.75 E -.165(ve)-.165 G 2.75(ra).165 G(ll of the members.)-2.75 E 0 Cg
EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(3/pg 4)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E .654
(5\) When a type in)63.2 104 R -.22(vo)-.44 G(lv).22 E .654(es a struct\
/union reference, print out the tag and where that struct/union type is\
 de\214ned, or)-.165 F
(\(incomplete\) if the de\214nition has not been seen yet.)63.2 117 Q
(E.g.:)5.5 E/F1 10/Courier@0 SF(INPUT:)178.4 158 Q(struct foo {)93.2 172
Q(int a;)93.2 186 Q(};)93.2 200 Q(struct foo *p;)93.2 242 Q
(struct bar *p2;)93.2 270 Q(OUTPUT:)178.4 298 Q
(struct foo definition at <stdin>:1{)93.2 312 Q 6(ai)93.2 326 S 6(sd)-6
G(efined at <stdin>:2 [in struct/union scope starting at <stdin>:1])-6 E
(as a field of struct foo)120.8 340 Q(off=0 bit_off=0 bit_wid=0, type:)
12 E(int)105.2 354 Q(})93.2 368 Q 6(pi)93.2 396 S 6(sd)-6 G
(efined at <stdin>:4 [in global scope starting at <stdin>:1] as a)-6 E
(variable with stgclass extern)93.2 410 Q(of type:)12 E(pointer to)105.2
424 Q(struct foo \(defined at <stdin>:1\))111.2 438 Q(p2 is defined at \
<stdin>:8 [in global scope starting at <stdin>:1] as a)93.2 466 Q
(variable with stgclass extern)93.2 480 Q(of type:)12 E(pointer to)105.2
494 Q(struct bar \(incomplete\))111.2 508 Q F0 1.661
(6\) Output reasonable error messages for)63.2 534 R/F2 11
/Times-Italic@0 SF(semantically)4.411 E F0(in)4.411 E -.275(va)-.44 G
1.66(lid things, such as attempted re-declarations, in).275 F -.275(va)
-.44 G(lid).275 E .908
(types \(e.g. a function returning a function\), etc.)63.2 547 R .908
(Error messages must gi)6.408 F 1.238 -.165(ve t)-.275 H .908
(he \214le and line at which the error is).165 F 3.866(detected. Y)63.2
560 R 1.115(ou should be able to reco)-1.21 F -.165(ve)-.165 G 3.865(rf)
.165 G 1.115(rom semantic errors and continue processing the input, b)
-3.865 F 1.115(ut this is not)-.22 F(mandatory)63.2 573 Q 5.5(.Y)-.715 G
(ou are not e)-6.71 E(xpected to reco)-.165 E -.165(ve)-.165 G 2.75(rf)
.165 G(rom syntax errors.)-2.75 E/F3 11/Times-Bold@0 SF
(SUGGESTIONS AND ISSUES)242.954 625 Q F0 .471(The BNF grammar which app\
ears in the C99 standard or in Harbison & Steele is a good starting poi\
nt.)63.2 664 R .472(Both use)5.972 F .278(the notation)63.2 677 R/F4 11
/Courier@0 SF(_opt)3.028 E F0 .278(to indicate an "optional" symbol.)
3.028 F .277(This, of course, is not something which yacc/bison pro)
5.778 F(vides.)-.165 E(foo_opt is equi)63.2 690 Q -.275(va)-.275 G
(lent to:).275 E 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(3/pg 5)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF 49.2(foo_opt: /*empty*/)75.2 105 R(|foo)120.8 119 Q(;)
120.8 133 Q F0 -1.21(Yo)63.2 159 S 3.571(um)1.21 G .821
(ight \214nd that it is better to "inline" some of these opt cases to a)
-3.571 F -.22(vo)-.22 G .822(id trouble with the LALR\(1\) algorithm,)
.22 F(e.g.:)63.2 172 Q F1(array_decl: decl '[' const_expr_opt ']')75.2
199 Q F0(could be re-written as)63.2 225 Q F1 31.2(array_decl: decl)75.2
252 R('[' const_expr ']')6 E(|decl '[' ']')178.4 266 Q(;)178.4 280 Q F0
2.612(Note that some copies of Harbison & Steele had an error in the pr\
inting of the grammar)63.2 306 R 8.111(.I)-.605 G 5.361(nt)-8.111 G
2.611(he rule for)-5.361 F(declaration,)63.2 319 Q/F2 11/Courier@0 SF
(declarator_init_list)2.75 E F0(should be optional, otherwise)2.75 E F1
(struct a {int a;};)178.4 346 Q F0 .691(is not recognized.)63.2 372 R
.691(The C99 standard has it right.)6.191 F -1.21(Yo)6.191 G .692
(ur professor took another approach and e)1.21 F .692
(xplicitly added the)-.165 F
(rules for struct/union def ';' and struct/union ref ';')63.2 385 Q
(Don')63.2 411 Q 4.287(tw)-.198 G 1.537(orry too much about ef)-4.397 F
1.537(\214cient memory allocation.)-.275 F 1.537(While we')7.037 F 4.287
(dl)-.55 G(ik)-4.287 E 4.287(et)-.11 G 4.287(od)-4.287 G -2.365 -.275
(ev e)-4.287 H 1.536(lop a memory management).275 F(strate)63.2 424 Q
3.007(gy that is neat, gi)-.165 F -.165(ve)-.275 G 5.758(nt).165 G 3.008
(he choice between completing the compiler project and ha)-5.758 F 3.008
(ving great memory)-.22 F(allocators, we really need to f)63.2 437 Q
-.22(avo)-.11 G 2.75(rt).22 G(he former)-2.75 E(.)-.605 E/F3 11
/Times-Bold@0 SF(IN CASE OF EMERGENCY)247.096 463 Q F0 2.172(If you are\
 running seriously behind and are looking for something to cut to get b\
ack on schedule, consider)63.2 489 R .506(eliminating support for struc\
tures and unions, since we will not strictly need them to test the comp\
iler later)63.2 502 R 6.006(.T)-.605 G(his)-6.006 E(doesn')63.2 515 Q
3.201(tm)-.198 G .451(ean this is an optional part of the assignment, b)
-3.201 F .451(ut if there is a part that you can')-.22 F 3.2<748c>-.198
G .45(nish, this w)-3.2 F .45(ould ha)-.11 F -.165(ve)-.22 G
(the least impact.)63.2 528 Q -1.21(Yo)63.2 554 S 3.679(uc)1.21 G .929
(ould also skip abstract type names.)-3.679 F .929(This will pre)6.429 F
-.165(ve)-.275 G .93(nt you from being able to handle the full C e).165
F(xpression)-.165 E 1.766(grammar \(needed for cast e)63.2 567 R 1.766
(xpressions and one form of sizeof operator\).)-.165 F(Ag)7.266 E 1.766
(ain, not optional, b)-.055 F 1.766(ut good triage)-.22 F 2.75
(material. As)63.2 580 R(we adv)2.75 E(ance to)-.275 E -.11(wa)-.275 G
(rd the \214nal production compiler).11 E 2.75(,w)-.44 G 2.75(ec)-2.75 G
(ould li)-2.75 E .33 -.165(ve w)-.275 H(ithout these tw).165 E 2.75(ot)
-.11 G(hings.)-2.75 E F3(COMPLETEL)227.994 632 Q 2.75(YO)-1.012 G(PTION)
-2.75 E(AL STUFF)-.22 E F0 .098(If you plan on tackling prototypes/para\
meter lists at this time, there are some things you should kno)63.2 658
R 4.278 -.715(w. I)-.275 H 2.848(fy).715 G .098(ou wish)-2.848 F
(to skip this optional part, stop reading no)63.2 671 Q 2.75(wa)-.275 G
(nd just get started on this assignment.)-2.75 E
(The distinction between function DECLARA)63.2 697 Q
(TION and function DEFINITION is subtle and trick)-1.221 E 4.18 -.715
(y. T)-.165 H(he follo).715 E(wing)-.275 E 0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 152.481(ECE466:Compilers PS)43.2 52 R(3/pg 6)
2.75 E(\2512021 Jef)156.958 E 2.75(fH)-.275 G(akner)-2.75 E/F1 10
/Courier@0 SF(int f\(char *p,int a\);)120.8 105 Q F0 1.279(declares the\
 identi\214er f to be the name of a function which returns int and has \
an ar)63.2 118 R 1.278(gument prototype of \(char)-.198 F 3.299
(*,int\). This)63.2 131 R .549(declaration is rooted in whate)3.299 F
-.165(ve)-.275 G 3.3(rt).165 G .55(he current scope is.)-3.3 F .55
(It could appear inside of a function de\214nition,)6.05 F 2.137
(block, or e)63.2 144 R -.165(ve)-.275 G 4.887(nas).165 G 2.137
(truct/union de\214nition \(e)-4.887 F 2.136
(xcept for the slight problem that functions can not be members of)-.165
F(struct/union, pointers to function are OK\).)63.2 157 Q(No)63.2 183 Q
1.43 -.715(w, c)-.275 H(onsider).715 E F1(int f\(char *p,int a\))120.8
210 Q({)120.8 224 Q(/*...*/)178.4 238 Q(})120.8 252 Q F0 2.775
(this contains both a DECLARA)63.2 265 R 2.775
(TION of f in the current scope and be)-1.221 F 2.776
(gins a DEFINITION of f too.)-.165 F(The)8.276 E .922(declaration tak)
63.2 278 R .922(es ef)-.11 F .922(fect, according to the C standard, at\
 the end of the declarator of which f is a part, i.e.)-.275 F .921
(at the)6.421 F .091(closing parenthesis.)63.2 291 R .091
(The function DEFINITION also be)5.591 F .091(gins a ne)-.165 F 2.841
(ws)-.275 G .091(cope, and the ar)-2.841 F .091
(guments p and a are implicitly)-.198 F 1.253
(declared within that scope.)63.2 304 R 1.253
(That declaration of the ar)6.753 F 1.253
(guments along with their names disappears at the closing)-.198 F .898
(brace, b)63.2 317 R .898(ut the declaration of f)-.22 F 2.109 -.605
('s r).605 H .899(eturn type and ar).605 F .899(gument prototype survi)
-.198 F -.165(ve)-.275 G 3.649(s. This).165 F .899(is because the abo)
3.649 F 1.229 -.165(ve f)-.165 H .899(orm, a).165 F .113
(function DEFINITION, is only v)63.2 330 R .112(alid at the top-le)-.275
F -.165(ve)-.275 G 2.862(lo).165 G 2.862(ft)-2.862 G .112(he grammar)
-2.862 F 5.612(.T)-.605 G .112(herefore the symbol f w)-5.612 F .112
(ould be installed in)-.11 F(the global scope.)63.2 343 Q .629
(Unfortunately for you, the compiler writer)63.2 369 R 3.38(,b)-.44 G
.63(oth declarations and de\214nitions of functions be)-3.38 F .63
(gin with a declarator)-.165 F(.)-.605 E -1.21(Yo)63.2 382 S 3.188(ud)
1.21 G(on')-3.188 E 3.188(tk)-.198 G(no)-3.188 E 1.868 -.715(w, w)-.275
H .438(hen seeing the opening parenthesis, what you are ultimately goin\
g to get, because the parser is).715 F .797(only looking one tok)63.2
395 R .797(en ahead.)-.11 F .797
(The approach which your professor took is to sa)6.297 F 1.127 -.165
(ve b)-.22 H .797(oth the types and the names).165 F .062(with the prot\
otype, and then when it is apparent that a function de\214nition is sta\
rting, to re-process that prototype to)63.2 408 R
(declare each formal parameter in the function')63.2 421 Q 2.75(ss)-.605
G(cope.)-2.75 E -1.21(Yo)63.2 447 S(ur professor is also a f)1.21 E
(an of the older K&R syntax:)-.11 E F1(int f\(p,a\))120.8 461 Q
(/* Or even just f\(p,a\) */)112.8 E(char *p;)120.8 475 Q
(/* a is implicitly declared int */)67.2 E({)120.8 489 Q(/*...*/)178.4
503 Q(})120.8 517 Q F0 .018(If you w)63.2 530 R .019(ant to support K&R\
 syntax, it will be necessary to insert a semantic action just before t\
he opening brace to)-.11 F(re-e)63.2 543 Q 1.215(xamine the formal para\
meter list and match the parameters up with declarations which were mad\
e in K&R)-.165 F 2.75(style. It)63.2 556 R
(is also necessary to do the implicit int declarations.)2.75 E -.165(Fo)
63.2 582 S 2.422(rmal parameters to functions which are of type "array \
of X" or "function returning Y" are automatically).165 F(con)63.2 595 Q
-.165(ve)-.44 G .291(rted to "pointer to X" or "pointer to function ret\
urning Y", as discussed in class, H&S and the C99 standard.).165 F -1.21
(Yo)63.2 608 S 2.75(us)1.21 G(hould apply those con)-2.75 E -.165(ve)
-.44 G(rsions when you process the prototype.).165 E 0 Cg EP
%%Trailer
end
%%EOF
